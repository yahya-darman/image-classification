# Load necessary libraries
library(jpeg)
library(dplyr)  # For data manipulation
# Read metadata
pm <- read.csv("//Users//workingyahya//Documents//MATH3333 Project//photoMetaData.csv")
n <- nrow(pm)
# Initialize matrices
X <- matrix(NA, ncol = 4, nrow = n)  # Increase ncol to 4 for additional column
# Process each image
for (j in 1:n) {
img <- readJPEG(paste0("//Users//workingyahya//Documents//MATH3333 Project//columbiaImages//", pm$name[j]))
# Calculate median RGB values
medRGB <- apply(img, 3, median)
# Calculate median intensity (example: using sum of pixel values)
medIntensity <- sum(img) / (dim(img)[1] * dim(img)[2])  # Example: sum of pixel values divided by total pixels
# Store data
X[j, ] <- c(medRGB, medIntensity)  # Store median RGB and median intensity
print(sprintf("%03d / %03d", j, n))
}
setwd("~/Documents/imageClassifier/code")
# Convert category to numeric
y <- as.numeric(pm$category == "outdoor-day")
# Combine predictors with target variable
data <- data.frame(y, X)
View(data)
View(data)
# Load necessary libraries
library(dplyr)
library(caret)  # For modeling functions
# Assuming 'data' dataframe is created as per your code
# Split data into training and testing sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(data$y, p = 0.7, list = FALSE)
trainData <- data[trainIndex, ]
testData <- data[-trainIndex, ]
View(trainIndex)
View(trainData)
View(testData)
View(trainIndex)
# Train a logistic regression model
model <- glm(y ~ ., data = trainData, family = "binomial")
# Print model summary
summary(model)
# Predict on test data
predictions <- predict(model, newdata = testData, type = "response")
# Convert probabilities to class predictions (0 or 1)
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# Confusion matrix
confusionMatrix(table(predicted_classes, testData$y))
# Accuracy
accuracy <- mean(predicted_classes == testData$y)
print(paste("Accuracy:", accuracy))
# Coefficients
coef(model)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Train logistic regression
logistic_model <- train(y ~ ., data = trainData, method = "glm", family = "binomial")
# Train random forest
rf_model <- train(y ~ ., data = trainData, method = "rf")
# Train logistic regression
logistic_model <- train(y ~ ., data = trainData, method = "glm", family = "binomial")
# Train random forest
rf_model <- train(y ~ ., data = trainData, method = "rf")
# Train support vector machine
svm_model <- train(y ~ ., data = trainData, method = "svmRadial")
# Train logistic regression
logistic_model <- train(y ~ ., data = trainData, method = "glm", family = "binomial")
# Train random forest
rf_model <- train(y ~ ., data = trainData, method = "rf")
# Train logistic regression
logistic_model <- train(y ~ ., data = trainData, method = "glm", family = "binomial")
# Train random forest
rf_model <- train(y ~ ., data = trainData, method = "rf")
# Train random forest
rf_model <- train(y ~ ., data = trainData, method = "rf", tuneLength = 3)
# Train logistic regression
logistic_model <- train(y ~ ., data = trainData, method = "glm", family = "binomial")
# Create a copy of the original dataset
trainData_modified <- trainData
# Convert the outcome variable to a factor
trainData_modified$y <- as.factor(trainData_modified$y)
# Train random forest
rf_model <- train(y ~ ., data = trainData_modified, method = "rf")
# Create a copy of the original dataset
trainData_modified <- trainData
# Convert the outcome variable to a factor
trainData_modified$y <- as.factor(trainData_modified$y)
# Train logistic regression
logistic_model <- train(y ~ ., data = trainData_modified, method = "glm", family = "binomial")
# Train random forest
rf_model <- train(y ~ ., data = trainData_modified, method = "rf")
# Train support vector machine
svm_model <- train(y ~ ., data = trainData_modified, method = "svmRadial")
# Predictions for logistic regression
logistic_predictions <- predict(logistic_model, newdata = testData)
logistic_accuracy <- mean(logistic_predictions == testData$y)
print(paste("Logistic Regression Accuracy:", logistic_accuracy))
# Predictions for random forest
rf_predictions <- predict(rf_model, newdata = testData)
rf_accuracy <- mean(rf_predictions == testData$y)
print(paste("Random Forest Accuracy:", rf_accuracy))
# Predictions for support vector machine
svm_predictions <- predict(svm_model, newdata = testData)
svm_accuracy <- mean(svm_predictions == testData$y)
print(paste("Support Vector Machine Accuracy:", svm_accuracy))
